knitr::opts_chunk$set(echo = TRUE)
library(ggstatsplot)
install.packages("ggstatsplot")
library(ggstatsplot)
data <- read.csv('musicclassintentions.csv')
library(ggstatsplot)
data <- read.csv('musicclassintentions.csv')
library(ggstatsplot)
data <- read.csv('musicclassintentions.csv')
ggbetweenstats(
data = data,
x = Level,
y = intentions,
title = "Distribution of Intentions to Sign Up for Music Across Grade Level"
)
library(psych)
install.packages("psych")
library(psych)
library(tidyverse)
variablelist <- data %>% select(intentions, values, needs, parentsupport, SESComp)
psych::pairs.panels(variablelist,
method = "pearson", # correlation method
hist.col = "#00AFBB",
density = TRUE,  # show density plots
ellipses = TRUE,
lm = TRUE# show correlation ellipses
)
library(tidyverse)
library(knitr)
library(broom)
tidy(lm(intentions ~ SESComp + parentsupport + needs + values, data=data)) %>%
kable(caption = "Estimates for a Model Fitted to Estimate Variation in Music Elective Intentions.",
col.names = c("Predictor", "B", "SE", "t", "p"),
digits = c(0, 2, 3, 2, 3))
library(lavaan)
install.packages("lavaan")
x <- 10 # This is an example of a comment.
setwd("~/GitHub/erinmr/data_bootcamp")
7+2
4
7+2
7+2-10*40
sum(2,4)
sum(2 4)
sum(2, 4)
sum(4:20)
seq(from = 0, to = 20, by = 4)
help(seq)
seq(from = 0, to = 20, by = 5)
help(seq)
seq(from = 0, to = 20, by = 10)
help(seq)
seq(from = 0, to = 20, by = 10)
help(sum)
pi
a <- 50
b <- 14
a + b
addvalues <- a + b
addvalues
a <- 50
b <- 14
c <- 25
d <- -25
c + d
addvalues <- a + b
addvalues
addvalues2 <- a + b + c
addvalues2
addvalues + addvalues2
#install.packages("tidyverse")
install.packages("fivethirtyeight")
library(tidyverse)
library(fivethirtyeight)
data <- US_births_1994_2003
View(data)
head(data)
tail(data)
colnames(data)
summary(data)
view(data)
data <- US_births_1994_2003
View(data)
head(data)
tail(data)
colnames(data)
summary(data)
view(data)
data <- US_births_1994_2003
View(data)
length(data) # number of elements or components
str(data)    # structure of an object
class(data)  # class or type of an object
names(data)  # column names
data$month <- as.numeric(data$month)
str(data)
head(data$day_of_week)
num_day_of_Week <- as.numeric(data$day_of_week)
head(num_day_of_Week)
head(data)
# Get the unique years of the data
unique(data$year)
# Compute the average number of births on any day in any year.
mean(data$births)
# Compute the standard deviation of the number of births in a given day
sd(data$births)
births_1995 <- filter(data, year==1995)$births
quantile(births_1995)
# Find the date of the maximum births
max(data$births)
maxindex <- which.max(data$births)
maxdate <- data$date[maxindex]
maxdate
filter(data, births==max(births))
# this is what filter is doing on groups
sundays <- filter(data, day_of_week == 'Sun')
filter(sundays, births==max(births))
mondays <- filter(data, day_of_week == 'Mon')
filter(mondays, births==max(births))
tuesdays <- filter(data, day_of_week == 'Tues')
filter(tuesdays, births==max(births))
data_grouped <- group_by(data, day_of_week)
filter(data_grouped, births==max(births))
# Add year as another grouping variable
data_grouped <- group_by(data, day_of_week, year)
data_max_day_year <- filter(data_grouped, births==max(births))
data_max_day_year
ggplot(data_max_day_year, aes(x = year, y = births, colour = day_of_week)) +
geom_line() +
ylab("Max births") +
ylim(c(0,15000))
write_csv(data_max_day_year, "max_births_per_dayofweek_per_year.csv")
data$month <- as.numeric(data$month)
str(data)
head(data$day_of_week)
num_day_of_Week <- as.numeric(data$day_of_week)
head(num_day_of_Week)
head(data)
head(data$day_of_week)
num_day_of_Week <- as.factor(data$day_of_week)
head(num_day_of_Week)
head(data)
head(data$day_of_week)
num_day_of_Week <- as.numeric(data$day_of_week)
head(num_day_of_Week)
head(data)
# Get the unique years of the data
unique(data$year)
# Get the unique years of the data
unique(data$day_of_week)
# Get the unique years of the data
unique(data$births)
max(data$births)
min(data$births)
quantile(data$births, probs=c(0.0, 0.33, 0.50, 0.66, 1.0))
max(data$births)
min(data$births)
sextile(data$births, probs=c(0.0, 0.33, 0.50, 0.66, 1.0))
max(data$births)
min(data$births)
quartile(data$births, probs=c(0.0, 0.33, 0.50, 0.66, 1.0))
max(data$births)
min(data$births)
quantile(data$births, probs=c(0.0, 0.33, 0.50, 0.66, 1.0))
births_1995 <- filter(data, year==1995)$births
quantile(births_1995)
# Find the date of the maximum births
max(data$births)
maxindex <- which.max(data$births)
maxdate <- data$date[maxindex]
maxdate
# Find the date of the maximum births
max(data$births)
maxindex <- which.max(data$births)
maxindex
maxdate <- data$date[maxindex]
maxdate
filter(data, births==max(births))
# this is what filter is doing on groups
sundays <- filter(data, day_of_week == 'Sun')
filter(sundays, births==max(births))
mondays <- filter(data, day_of_week == 'Mon')
filter(mondays, births==max(births))
tuesdays <- filter(data, day_of_week == 'Tues')
filter(tuesdays, births==max(births))
# this is what filter is doing on groups
sundays <- filter(data, day_of_week == 'Sun')
filter(sundays, births==max(births))
mondays <- filter(data, day_of_week == 'Mon')
filter(mondays, births==max(births))
tuesdays <- filter(data, day_of_week == 'Tues')
filter(tuesdays, births==max(births))
knitr::opts_chunk$set(echo = TRUE)
library(ggstatsplot)
data <- read.csv('musicclassintentions.csv')
ggbetweenstats(
data = data,
x = Level,
y = intentions,
title = "Distribution of Intentions to Sign Up for Music Across Grade Level"
)
library(psych)
library(tidyverse)
variablelist <- data %>% select(intentions, values, needs, parentsupport, SESComp)
psych::pairs.panels(variablelist,
method = "pearson", # correlation method
hist.col = "#00AFBB",
density = TRUE,  # show density plots
ellipses = TRUE,
lm = TRUE# show correlation ellipses
)
library(tidyverse)
library(knitr)
library(broom)
tidy(lm(intentions ~ SESComp + parentsupport + needs + values, data=data)) %>%
kable(caption = "Estimates for a Model Fitted to Estimate Variation in Music Elective Intentions.",
col.names = c("Predictor", "B", "SE", "t", "p"),
digits = c(0, 2, 3, 2, 3))
library(lavaan)
library(semPlot)
knitr::opts_chunk$set(echo = TRUE)
library(ggstatsplot)
data <- read.csv('musicclassintentions.csv')
ggbetweenstats(
data = data,
x = Level,
y = intentions,
title = "Distribution of Intentions to Sign Up for Music Across Grade Level"
)
library(psych)
library(tidyverse)
variablelist <- data %>% select(intentions, values, needs, parentsupport, SESComp)
psych::pairs.panels(variablelist,
method = "pearson", # correlation method
hist.col = "#00AFBB",
density = TRUE,  # show density plots
ellipses = TRUE,
lm = TRUE# show correlation ellipses
)
library(tidyverse)
library(knitr)
library(broom)
tidy(lm(intentions ~ SESComp + parentsupport + needs + values, data=data)) %>%
kable(caption = "Estimates for a Model Fitted to Estimate Variation in Music Elective Intentions.",
col.names = c("Predictor", "B", "SE", "t", "p"),
digits = c(0, 2, 3, 2, 3))
library(lavaan)
library(semPlot)
install.packages("semPlot")
install.packages("semPlot")
library(semPlot)
knitr::opts_chunk$set(echo = TRUE)
# this is what filter is doing on groups
sundays <- filter(data, day_of_week == 'Sun')
head(data$day_of_week)
num_day_of_Week <- as.numeric(data$day_of_week)
head(num_day_of_Week)
head(data)
# Get the unique years of the data
unique(data$births)
# this is what filter is doing on groups
sundays <- filter(data, day_of_week == 'Sun')
head(data$day_of_week)
num_day_of_Week <- as.numeric(data$day_of_week)
head(num_day_of_Week)
head(data)
#install.packages("tidyverse")
#install.packages("fivethirtyeight")
library(tidyverse)
library(fivethirtyeight)
data <- US_births_1994_2003
View(data)
head(data)
tail(data)
colnames(data)
summary(data)
view(data)
length(data) # number of elements or components
str(data)    # structure of an object
class(data)  # class or type of an object
names(data)  # column names
data$month <- as.numeric(data$month)
str(data)
head(data$day_of_week)
num_day_of_Week <- as.numeric(data$day_of_week)
head(num_day_of_Week)
head(data)
# Get the unique years of the data
unique(data$year)
# Compute the average number of births on any day in any year.
mean(data$births)
# Compute the standard deviation of the number of births in a given day
sd(data$births)
max(data$births)
min(data$births)
quantile(data$births, probs=c(0.0, 0.33, 0.50, 0.66, 1.0))
births_1995 <- filter(data, year==1995)$births
quantile(births_1995)
filter(data, births==max(births))
# this is what filter is doing on groups
sundays <- filter(data, day_of_week == 'Sun')
filter(sundays, births==max(births))
mondays <- filter(data, day_of_week == 'Mon')
filter(mondays, births==max(births))
tuesdays <- filter(data, day_of_week == 'Tues')
filter(tuesdays, births==max(births))
data_grouped <- group_by(data, day_of_week)
filter(data_grouped, births==max(births))
# this is what filter is doing on groups
sundays <- filter(data, day_of_week == 'Sun')
filter(sundays, births==max(births))
mondays <- filter(data, day_of_week == 'Mon')
filter(mondays, births==max(births))
tuesdays <- filter(data, day_of_week == 'Tues')
filter(tuesdays, births==max(births))
wednesdays <- filter(data, day_of_week == 'Wed')
filter(tuesdays, births==max(births))
# this is what filter is doing on groups
sundays <- filter(data, day_of_week == 'Sun')
filter(sundays, births==max(births))
mondays <- filter(data, day_of_week == 'Mon')
filter(mondays, births==max(births))
tuesdays <- filter(data, day_of_week == 'Tues')
filter(tuesdays, births==max(births))
wednesdays <- filter(data, day_of_week == 'Wed')
filter(wednesdays, births==max(births))
# this is what filter is doing on groups
sundays <- filter(data, day_of_week == 'Sun')
filter(sundays, births==max(births))
mondays <- filter(data, day_of_week == 'Mon')
filter(mondays, births==max(births))
tuesdays <- filter(data, day_of_week == 'Tues')
filter(tuesdays, births==max(births))
wednesdays <- filter(data, day_of_week == 'Wed')
filter(wednesdays, births==max(births))
thursdays <- filter(data, day_of_week == 'Thurs')
filter(thursdays, births==max(births))
fridays <- filter(data, day_of_week == 'Fri')
filter(fridays, births==max(births))
saturdays <- filter(data, day_of_week == 'Sat')
filter(saturdays, births==max(births))
